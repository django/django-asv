{
    "data_struct_benchmarks.multi_value_dict.benchmark.MultiValueDictBench.time_multi_value_dict": {
        "code": "class MultiValueDictBench:\n    def time_multi_value_dict(self):\n        for i in range(1000):\n            case_dict = MultiValueDict(self.case)\n    \n            case_dict[\"a\"]\n            case_dict[\"b\"]\n            case_dict[\"c\"]\n    \n            case_dict.update(self.update)\n            copy.copy(case_dict)\n            copy.deepcopy(case_dict)\n    \n            case_dict.items()\n            case_dict.lists()\n            for i in case_dict:\n                i\n    \n            case_dict[\"a\"] = \"A\"\n            case_dict[\"b\"] = \"B\"\n            case_dict[\"c\"] = \"C\"\n\n    def setup(self):\n        bench_setup()\n        self.case = {\"a\": [\"a\"], \"b\": [\"a\", \"b\"], \"c\": [\"a\", \"b\", \"c\"]}\n        self.update = {\"a\": [\"a\"], \"b\": [\"a\", \"b\"], \"c\": [\"a\", \"b\", \"c\"]}",
        "min_run_count": 2,
        "name": "data_struct_benchmarks.multi_value_dict.benchmark.MultiValueDictBench.time_multi_value_dict",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "87acd4d238cf055be76b8987a6748b697c7515e52712dfee8ee0efebc4de5f86",
        "warmup_time": -1
    },
    "form_benchmarks.form_clean.benchmark.FormClean.time_form_clean": {
        "code": "class FormClean:\n    def time_form_clean(self):\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n\n    def setup(self):\n        bench_setup()\n        self.form_clean = BookForm({\"title\": \"hi\"})",
        "min_run_count": 2,
        "name": "form_benchmarks.form_clean.benchmark.FormClean.time_form_clean",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ee29794571c41279669d20f20281cc13f17d30b60bcf0a82427562e1966ddbcc",
        "warmup_time": -1
    },
    "form_benchmarks.form_create.benchmark.FormCreate.time_form_create": {
        "code": "class FormCreate:\n    def time_form_create(self):\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "form_benchmarks.form_create.benchmark.FormCreate.time_form_create",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f295800916ba0353a8a99603d8dc2b2b9250a086b427f34f687fa6ca8c74a437",
        "warmup_time": -1
    },
    "form_benchmarks.form_render.benchmark.FormRender.time_large_form_render": {
        "code": "class FormRender:\n    def time_large_form_render(self):\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n\n    def setup(self):\n        bench_setup()\n        self.form_render_small = BookForm()\n        self.form_render_large = BookFormLarge()",
        "min_run_count": 2,
        "name": "form_benchmarks.form_render.benchmark.FormRender.time_large_form_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "66f0369fe80d6fd2f3faf90e024b84f3e3f428f86a55391f33c8fda952f4069b",
        "warmup_time": -1
    },
    "form_benchmarks.form_render.benchmark.FormRender.time_small_form_render": {
        "code": "class FormRender:\n    def time_small_form_render(self):\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n\n    def setup(self):\n        bench_setup()\n        self.form_render_small = BookForm()\n        self.form_render_large = BookFormLarge()",
        "min_run_count": 2,
        "name": "form_benchmarks.form_render.benchmark.FormRender.time_small_form_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cdb90a82bf65beabdc6b9d90b77b4078dc0421573ddcd3667c163dafc183115c",
        "warmup_time": -1
    },
    "form_benchmarks.form_validate.benchmark.FormValidate.time_form_invalid": {
        "code": "class FormValidate:\n    def time_form_invalid(self):\n        self.invalid_form.is_valid()\n\n    def setup(self):\n        bench_setup()\n        self.form = BookForm({\"title\": \"hi\"})\n        self.invalid_form = BookForm({\"title\": \"abc\"})",
        "min_run_count": 2,
        "name": "form_benchmarks.form_validate.benchmark.FormValidate.time_form_invalid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ad7620bc75a45df372d038555834e7ed535578e19fd62452d062cefabdf368f7",
        "warmup_time": -1
    },
    "form_benchmarks.form_validate.benchmark.FormValidate.time_form_validate": {
        "code": "class FormValidate:\n    def time_form_validate(self):\n        self.form.is_valid()\n\n    def setup(self):\n        bench_setup()\n        self.form = BookForm({\"title\": \"hi\"})\n        self.invalid_form = BookForm({\"title\": \"abc\"})",
        "min_run_count": 2,
        "name": "form_benchmarks.form_validate.benchmark.FormValidate.time_form_validate",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "437e1a9cc92f7a7e2962cbcef25685fdc9abb08ea893ef13117809c871ab2485",
        "warmup_time": -1
    },
    "form_benchmarks.select_date_widget.benchmark.DateWidget.time_selectdatewidget": {
        "code": "class DateWidget:\n    def time_selectdatewidget(self):\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n\n    def setup(self):\n        bench_setup()\n        self.widget = SelectDateWidget(years=(2020,))",
        "min_run_count": 2,
        "name": "form_benchmarks.select_date_widget.benchmark.DateWidget.time_selectdatewidget",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e142c151a06875776e38885d1898841e9c4cb94eacf6be20e18abe1defa4030b",
        "warmup_time": -1
    },
    "model_benchmarks.model_create.benchmark.ModelCreate.time_model_creation": {
        "code": "class ModelCreate:\n    def time_model_creation(self):\n        Book.objects.create(title=\"hi\")\n        Book.objects.create(title=\"Bye!\")\n        Book.objects.create(title=\"hi\")\n        Book.objects.create(title=\"Bye\")\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "model_benchmarks.model_create.benchmark.ModelCreate.time_model_creation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "91180db199cb53578ddba7cc684885e2afde1d4c44861f83fd2a06b18f33b747",
        "warmup_time": -1
    },
    "model_benchmarks.model_delete.benchmark.ModelDelete.time_delete": {
        "code": "class ModelDelete:\n    def time_delete(self):\n        for i in range(10):\n            Book.objects.filter(title=f\"foobar{i}\").delete()\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(10):\n            Book.objects.create(title=f\"foobar{i}\")",
        "min_run_count": 2,
        "name": "model_benchmarks.model_delete.benchmark.ModelDelete.time_delete",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "79a09d314c79d086df04a7fe572a564d56bd7e48081bfff8fc5a06a82c07c594",
        "warmup_time": -1
    },
    "model_benchmarks.model_save_existing.benchmark.SaveExisting.time_save_existing": {
        "code": "class SaveExisting:\n    def time_save_existing(self):\n        b = Book.objects.get(id=1)\n        for i in range(0, 30):\n            b.save()\n\n    def setup(self):\n        bench_setup(migrate=True)\n        Book.objects.create(id=1, title=\"Foo\")",
        "min_run_count": 2,
        "name": "model_benchmarks.model_save_existing.benchmark.SaveExisting.time_save_existing",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "525f25f65810aa120b97e393077f231c99bb5f88e9f53656cbe71d62a669e246",
        "warmup_time": -1
    },
    "model_benchmarks.model_save_new.benchmark.SaveNew.time_save_new": {
        "code": "class SaveNew:\n    def time_save_new(self):\n        for i in range(0, 30):\n            b = Book(id=i, title=\"Foo\")\n            b.save()\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "model_benchmarks.model_save_new.benchmark.SaveNew.time_save_new",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4f0e2dafce2ac247d865fcb80db98261fa0904821d191fa014bf4e8826bdbbe6",
        "warmup_time": -1
    },
    "other_benchmarks.raw_sql.benchmark.RawSql.time_raw_sql": {
        "code": "class RawSql:\n    def time_raw_sql(self):\n        for i in range(10):\n            cursor = connection.cursor()\n            cursor.execute(\"select field1 from raw_sql_onefield\")\n            list(cursor.fetchall())\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(0, 10):\n            OneField(field1=i).save()",
        "min_run_count": 2,
        "name": "other_benchmarks.raw_sql.benchmark.RawSql.time_raw_sql",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d0365d9e4c87fd5f9d57ddbee3adb462787c2ced150ff9aff871ee5112a67ca4",
        "warmup_time": -1
    },
    "query_benchmarks.query_aggregate.benchmark.QueryAggr.time_aggregate": {
        "code": "class QueryAggr:\n    def time_aggregate(self):\n        Book.objects.all().aggregate(Count(\"title\"))\n        Book.objects.all().aggregate(Count(\"title\"))\n        Book.objects.all().aggregate(Count(\"title\"))\n    \n        Book.objects.all().aggregate(Count(\"id\"))\n        Book.objects.all().aggregate(Count(\"id\"))\n        Book.objects.all().aggregate(Count(\"id\"))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_aggregate.benchmark.QueryAggr.time_aggregate",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "262bd417ed516b6db9458b2a27447c9330457648afb5cdd41911921e935c68b9",
        "warmup_time": -1
    },
    "query_benchmarks.query_all.benchmark.QueryAll.time_query_all": {
        "code": "class QueryAll:\n    def time_query_all(self):\n        list(Book.objects.iterator())\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(3000):\n            Book(pk=i, title=f\"foobar_{i}\").save()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_all.benchmark.QueryAll.time_query_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2cd7258eb4918aea93cd803d894c068e7e8568c04f8ebe9d07964dd654a2904a",
        "warmup_time": -1
    },
    "query_benchmarks.query_all_conv.benchmark.QueryAllConv.time_query_all_conv": {
        "code": "class QueryAllConv:\n    def time_query_all_conv(self):\n        list(Converters.objects.iterator())\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(100):\n            Converters().save()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_all_conv.benchmark.QueryAllConv.time_query_all_conv",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d69a382f9674588bcc85e35fc006cbd0f6e5bb405b20c2a43bd509ea38b92b91",
        "warmup_time": -1
    },
    "query_benchmarks.query_annotate.benchmark.QueryAnnotate.time_annotate": {
        "code": "class QueryAnnotate:\n    def time_annotate(self):\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_annotate.benchmark.QueryAnnotate.time_annotate",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "788b35efac890a1a2c2606a5d7eee47d7c0ecb36f5e1d903b750d462fbb2bf6f",
        "warmup_time": -1
    },
    "query_benchmarks.query_complex_filter.benchmark.QueryCmplxFilter.time_query_complex_filter": {
        "code": "class QueryCmplxFilter:\n    def time_query_complex_filter(self):\n        Book.objects.complex_filter({\"pk\": 1})\n        Book.objects.complex_filter({\"pk\": 2})\n        Book.objects.complex_filter({\"pk\": 3})\n        Book.objects.complex_filter({\"pk\": 4})\n        Book.objects.complex_filter({\"pk\": 5})\n        Book.objects.complex_filter({\"pk\": 6})\n        Book.objects.complex_filter({\"pk\": 7})\n        Book.objects.complex_filter({\"pk\": 8})\n        Book.objects.complex_filter({\"pk\": 9})\n        Book.objects.complex_filter({\"pk\": 10})\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_complex_filter.benchmark.QueryCmplxFilter.time_query_complex_filter",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3ae4f08ae12592cc5bf85bb0ff31501cb9db067c8c3468b04777fb35a0fee1ba",
        "warmup_time": -1
    },
    "query_benchmarks.query_count.benchmark.QueryCount.time_query_count": {
        "code": "class QueryCount:\n    def time_query_count(self):\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(10):\n            Book(pk=i, title=f\"foobar_{i}\").save()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_count.benchmark.QueryCount.time_query_count",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2a025f977800b824be701416db7731d555b887e1b1938443150d24ff4fa8ebd0",
        "warmup_time": -1
    },
    "query_benchmarks.query_dates.benchmark.QueryDates.time_query_dates": {
        "code": "class QueryDates:\n    def time_query_dates(self):\n        list(Book.objects.dates(\"created_date\", \"year\", \"ASC\"))\n        list(Book.objects.dates(\"created_date\", \"year\", \"DESC\"))\n        list(Book.objects.dates(\"created_date\", \"month\", \"ASC\"))\n        list(Book.objects.dates(\"created_date\", \"month\", \"DESC\"))\n        list(Book.objects.dates(\"created_date\", \"day\", \"ASC\"))\n        list(Book.objects.dates(\"created_date\", \"day\", \"DESC\"))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_dates.benchmark.QueryDates.time_query_dates",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "62cc8cf7481d2b65d3c219174582d7cee1309073de75d2dfb248c83d1fdd8b35",
        "warmup_time": -1
    },
    "query_benchmarks.query_delete.benchmark.QueryDelete.time_query_delete": {
        "code": "class QueryDelete:\n    def time_query_delete(self):\n        Book.objects.all().delete()\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(10):\n            Book(pk=i, title=f\"foobar_{i}\").save()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_delete.benchmark.QueryDelete.time_query_delete",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bb8fa0a6ecd64e37ae57561147f7c6827b6fef33a547ec771fd5f1caaf95fb02",
        "warmup_time": -1
    },
    "query_benchmarks.query_delete_related.benchmark.QueryDeleteRel.time_query_del_rel": {
        "code": "class QueryDeleteRel:\n    def time_query_del_rel(self):\n        Artist.objects.all().delete()\n\n    def setup(self):\n        bench_setup(migrate=True)\n        self.a1 = Artist.objects.create(name=\"abc\")\n        self.a2 = Artist.objects.create(name=\"abc\")\n        self.a3 = Artist.objects.create(name=\"abc\")\n        self.a4 = Artist.objects.create(name=\"abc\")\n        self.a5 = Artist.objects.create(name=\"abc\")\n        self.a6 = Artist.objects.create(name=\"abc\")\n        self.a7 = Artist.objects.create(name=\"abc\")\n        self.a8 = Artist.objects.create(name=\"abc\")\n        self.a9 = Artist.objects.create(name=\"abc\")\n        self.a10 = Artist.objects.create(name=\"abc\")\n        for i in range(10):\n            Song.objects.create(artist=self.a1, name=f\"song{i}\")\n            Song.objects.create(artist=self.a2, name=f\"song{i}\")\n            Song.objects.create(artist=self.a3, name=f\"song{i}\")\n            Song.objects.create(artist=self.a4, name=f\"song{i}\")\n            Song.objects.create(artist=self.a5, name=f\"song{i}\")\n            Song.objects.create(artist=self.a6, name=f\"song{i}\")\n            Song.objects.create(artist=self.a7, name=f\"song{i}\")\n            Song.objects.create(artist=self.a8, name=f\"song{i}\")\n            Song.objects.create(artist=self.a9, name=f\"song{i}\")\n            Song.objects.create(artist=self.a10, name=f\"song{i}\")",
        "min_run_count": 2,
        "name": "query_benchmarks.query_delete_related.benchmark.QueryDeleteRel.time_query_del_rel",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8e16574ce95e501c7c1d3131c11dcc4d33607a7d02d86a9bc423e148a13b7a78",
        "warmup_time": -1
    },
    "query_benchmarks.query_distinct.benchmark.QueryDistinct.time_query_distinct": {
        "code": "class QueryDistinct:\n    def time_query_distinct(self):\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_distinct.benchmark.QueryDistinct.time_query_distinct",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2381751aa6177ac678baf313bb6b26406eab664fdc0baa7da53323c3f9f0f1ce",
        "warmup_time": -1
    },
    "query_benchmarks.query_exclude.benchmark.QueryExclude.time_query_exclude": {
        "code": "class QueryExclude:\n    def time_query_exclude(self):\n        list(Book.objects.exclude(id=1))\n        list(Book.objects.exclude(id=2))\n        list(Book.objects.exclude(id=3))\n        list(Book.objects.exclude(id=4))\n        list(Book.objects.exclude(id=5))\n        list(Book.objects.exclude(id=6))\n        list(Book.objects.exclude(id=7))\n        list(Book.objects.exclude(id=8))\n        list(Book.objects.exclude(id=9))\n        list(Book.objects.exclude(id=10))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_exclude.benchmark.QueryExclude.time_query_exclude",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0ec6607e8596b0906e7f012170ef2fe3db17e5ccc9ddbef4767db6e4b4335046",
        "warmup_time": -1
    },
    "query_benchmarks.query_exists.benchmark.QueryExists.time_query_exists": {
        "code": "class QueryExists:\n    def time_query_exists(self):\n        # Checking for object that exists\n        Book.objects.filter(id=1).exists()\n        Book.objects.filter(id=2).exists()\n        Book.objects.filter(id=3).exists()\n        Book.objects.filter(id=4).exists()\n        Book.objects.filter(id=5).exists()\n    \n        # Checking for object that does not exist\n        Book.objects.filter(id=11).exists()\n        Book.objects.filter(id=12).exists()\n        Book.objects.filter(id=13).exists()\n        Book.objects.filter(id=14).exists()\n        Book.objects.filter(id=15).exists()\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_exists.benchmark.QueryExists.time_query_exists",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "95f702f8cefab6c10cf13623abd6b66fab22232e235f9466701ff131d30f9f2c",
        "warmup_time": -1
    },
    "query_benchmarks.query_filter.benchmark.QueryFilter.time_query_filter": {
        "code": "class QueryFilter:\n    def time_query_filter(self):\n        list(Book.objects.filter(id=1))\n        list(Book.objects.filter(id=2))\n        list(Book.objects.filter(id=3))\n        list(Book.objects.filter(id=4))\n        list(Book.objects.filter(id=5))\n        list(Book.objects.filter(id=6))\n        list(Book.objects.filter(id=7))\n        list(Book.objects.filter(id=8))\n        list(Book.objects.filter(id=9))\n        list(Book.objects.filter(id=10))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_filter.benchmark.QueryFilter.time_query_filter",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4bc7858513d878a27705a1bb6e6bea7b102ce1b39d072d9d18e9c6a072ea637b",
        "warmup_time": -1
    },
    "query_benchmarks.query_get.benchmark.QueryGet.time_query_get": {
        "code": "class QueryGet:\n    def time_query_get(self):\n        for i in range(10):\n            # This will succeed\n            Book.objects.get(id=1)\n            try:\n                # This will fail, due to too many objects\n                Book.objects.get()\n            except Book.MultipleObjectsReturned:\n                pass\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(10):\n            Book(pk=i, title=f\"foobar_{i}\").save()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_get.benchmark.QueryGet.time_query_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4f01613632da9bf46243d761371af47295c535ab8d9d4331cee5979b84bda658",
        "warmup_time": -1
    },
    "query_benchmarks.query_get_or_create.benchmark.QueryGetOrCreate.time_query_get_or_create": {
        "code": "class QueryGetOrCreate:\n    def time_query_get_or_create(self):\n        # This will do a create ...\n        Book.objects.get_or_create(id=self.next_id, defaults={\"title\": \"hi\"})\n        Book.objects.get_or_create(id=self.next_id + 1, defaults={\"title\": \"hi\"})\n        Book.objects.get_or_create(id=self.next_id + 2, defaults={\"title\": \"hi\"})\n    \n        # ... and this a get.\n        Book.objects.get_or_create(id=self.next_id, defaults={\"title\": \"hi\"})\n        Book.objects.get_or_create(id=self.next_id + 1, defaults={\"title\": \"hi\"})\n        Book.objects.get_or_create(id=self.next_id + 2, defaults={\"title\": \"hi\"})\n\n    def setup(self):\n        bench_setup(migrate=True)\n        self.next_id = Book.objects.count() + 1",
        "min_run_count": 2,
        "name": "query_benchmarks.query_get_or_create.benchmark.QueryGetOrCreate.time_query_get_or_create",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3e191c7c953a2554cfbf4f5694a7fe4f4445289bd86ca70360662c3c405492fb",
        "warmup_time": -1
    },
    "query_benchmarks.query_in_bulk.benchmark.QueryInBulk.time_query_in_bulk": {
        "code": "class QueryInBulk:\n    def time_query_in_bulk(self):\n        Book.objects.in_bulk([1])\n        Book.objects.in_bulk([1, 2])\n        Book.objects.in_bulk([1, 2, 3])\n        Book.objects.in_bulk([1, 2, 3, 4])\n        Book.objects.in_bulk([1, 2, 3, 4, 5])\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_in_bulk.benchmark.QueryInBulk.time_query_in_bulk",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b18427aab8a0e5e2060eca1624c3481c013959597961cb0bb56e1c7d0c9f9c30",
        "warmup_time": -1
    },
    "query_benchmarks.query_latest.benchmark.QueryLatest.time_query_latest": {
        "code": "class QueryLatest:\n    def time_query_latest(self):\n        Book.objects.latest()\n        Book.objects.latest()\n        Book.objects.latest()\n        Book.objects.latest()\n        Book.objects.latest()\n        Book.objects.latest()\n        Book.objects.latest()\n        Book.objects.latest()\n        Book.objects.latest()\n        Book.objects.latest()\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_latest.benchmark.QueryLatest.time_query_latest",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4ce2d76b4754c60ab9bbf96624f17b71a4564faaa2c6e66d6df8dcb91fc5e104",
        "warmup_time": -1
    },
    "query_benchmarks.query_none.benchmark.QueryNone.time_query_none": {
        "code": "class QueryNone:\n    def time_query_none(self):\n        list(Book.objects.none())\n        list(Book.objects.none())\n        list(Book.objects.none())\n        list(Book.objects.none())\n        list(Book.objects.none())\n        list(Book.objects.none())\n        list(Book.objects.none())\n        list(Book.objects.none())\n        list(Book.objects.none())\n        list(Book.objects.none())\n        list(Book.objects.none())\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_none.benchmark.QueryNone.time_query_none",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2113318162281474bb6fffb406282d950cb99bdf292f9ad2590b771faac32f4a",
        "warmup_time": -1
    },
    "query_benchmarks.query_order_by.benchmark.QueryOrderBy.time_query_order_by": {
        "code": "class QueryOrderBy:\n    def time_query_order_by(self):\n        list(Book.objects.order_by(\"id\"))\n        list(Book.objects.order_by(\"id\"))\n        list(Book.objects.order_by(\"id\"))\n    \n        list(Book.objects.order_by(\"title\"))\n        list(Book.objects.order_by(\"title\"))\n        list(Book.objects.order_by(\"title\"))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_order_by.benchmark.QueryOrderBy.time_query_order_by",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "87da8adfc118616f7404a1e760d45b0820ec53df43b8f4d34a0a2ecea0de279e",
        "warmup_time": -1
    },
    "query_benchmarks.query_prefetch_related.benchmark.QueryPrefetch.time_query_prefetch": {
        "code": "class QueryPrefetch:\n    def time_query_prefetch(self):\n        for i in range(10):\n            for a in Author.objects.prefetch_related(\"books\"):\n                list(a.books.all())\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(20):\n            a = Author.objects.create(author=f\"Author {i}\")\n            books = [Book.objects.create(title=f\"Title {j}\") for j in range(3)]\n            a.books.add(*books)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_prefetch_related.benchmark.QueryPrefetch.time_query_prefetch",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2829296cc2e48cdcbe705533de301698c251efb22acaf9a96c9c7912c6096ab8",
        "warmup_time": -1
    },
    "query_benchmarks.query_raw.benchmark.QueryRaw.time_query_raw": {
        "code": "class QueryRaw:\n    def time_query_raw(self):\n        list(MultiField.objects.raw(\"select * from query_raw_multifield\"))\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(1000):\n            kwargs = {f\"field{j}\": f\"foobar_{i}_{j}\" for j in range(1, 11)}\n            MultiField(**kwargs).save()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_raw.benchmark.QueryRaw.time_query_raw",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5ac872bcc6b5774c75e1c2952ed5a4772b1d72c5beadca3d04c2de677662abdd",
        "warmup_time": -1
    },
    "query_benchmarks.query_raw_deferred.benchmark.QueryRawDeferred.time_query_raw_deferred": {
        "code": "class QueryRawDeferred:\n    def time_query_raw_deferred(self):\n        list(MultiField.objects.raw(\"select id from query_raw_deferred_multifield\"))\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(1000):\n            kwargs = {f\"field{j}\": f\"foobar_{i}_{j}\" for j in range(1, 11)}\n            MultiField(**kwargs).save()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_raw_deferred.benchmark.QueryRawDeferred.time_query_raw_deferred",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "60864f8f06fc1c6c54297db2d76c41a07c24a0e1ab6ca9d96fd1d8b6f0e92a28",
        "warmup_time": -1
    },
    "query_benchmarks.query_select_related.benchmark.QuerySelectRelated.time_query_select_related": {
        "code": "class QuerySelectRelated:\n    def time_query_select_related(self):\n        for i in range(10):\n            list(Book.objects.select_related(\"author\"))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_select_related.benchmark.QuerySelectRelated.time_query_select_related",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d266535d490ab3814f7b6edf2575e47a22756d095b2c1fc71acf95ddf15287de",
        "warmup_time": -1
    },
    "query_benchmarks.query_update.benchmark.QueryUpdate.time_query_update": {
        "code": "class QueryUpdate:\n    def time_query_update(self):\n        for i in range(1, 11):\n            Book.objects.all().update(title=f\"{i}\")\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_update.benchmark.QueryUpdate.time_query_update",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bb293444df7ed0ef21cae88a76cdeb7c458c5f31c0d907428fffabdf622ac9e3",
        "warmup_time": -1
    },
    "query_benchmarks.query_values.benchmark.QueryValues.time_query_values": {
        "code": "class QueryValues:\n    def time_query_values(self):\n        list(Book.objects.values(\"title\"))\n        list(Book.objects.values(\"title\"))\n        list(Book.objects.values(\"title\"))\n        list(Book.objects.values(\"title\"))\n        list(Book.objects.values(\"title\"))\n        list(Book.objects.values(\"title\"))\n        list(Book.objects.values(\"title\"))\n        list(Book.objects.values(\"title\"))\n        list(Book.objects.values(\"title\"))\n        list(Book.objects.values(\"title\"))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_values.benchmark.QueryValues.time_query_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f5fb27ea581fc95f397b7998fb8f0ec0e3f82452ca47d5a051d04b718d63d7a3",
        "warmup_time": -1
    },
    "query_benchmarks.query_values_10000.benchmark.QueryValues10000.time_query_values_10000": {
        "code": "class QueryValues10000:\n    def time_query_values_10000(self):\n        list(Book.objects.values(\"title\"))\n\n    def setup(self):\n        bench_setup(migrate=True)\n        Book.objects.bulk_create((Book(title=\"title\") for x in range(10000)))",
        "min_run_count": 2,
        "name": "query_benchmarks.query_values_10000.benchmark.QueryValues10000.time_query_values_10000",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6321727629c47f9b9a3e1004a901fef2e3925e7b486275e63242f5094606e2c7",
        "warmup_time": -1
    },
    "query_benchmarks.query_values_list.benchmark.QueryValuesList.time_query_values_list": {
        "code": "class QueryValuesList:\n    def time_query_values_list(self):\n        list(Book.objects.values_list(\"title\"))\n        list(Book.objects.values_list(\"title\"))\n        list(Book.objects.values_list(\"title\"))\n        list(Book.objects.values_list(\"title\"))\n        list(Book.objects.values_list(\"title\"))\n        list(Book.objects.values_list(\"title\"))\n        list(Book.objects.values_list(\"title\"))\n        list(Book.objects.values_list(\"title\"))\n        list(Book.objects.values_list(\"title\"))\n        list(Book.objects.values_list(\"title\"))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_values_list.benchmark.QueryValuesList.time_query_values_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0d5f041ebb3f5c8b922ce7d2ac8cc13a84e4858f0a59f1ae6fa3372e37d70d6a",
        "warmup_time": -1
    },
    "query_benchmarks.queryset_filter_chain.benchmark.FilterChain.time_filter_chain": {
        "code": "class FilterChain:\n    def time_filter_chain(self):\n        Book.objects.filter(title=\"Talent\").filter(\n            description__icontains=\"top performers\"\n        ).filter(author_name__startswith=\"Geoff\").filter(\n            date_created__lt=datetime.datetime(year=2010, month=1, day=1)\n        ).filter(\n            date_created__gte=datetime.date(year=2007, month=1, day=1)\n        ).filter(\n            date_published=datetime.datetime.now()\n        ).filter(\n            enabled=True\n        )\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.queryset_filter_chain.benchmark.FilterChain.time_filter_chain",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cacb3eebda5c4122da9b0beaf867dcfb1c6754bf88abe017853671093e6ff2ca",
        "warmup_time": -1
    },
    "template_benchmarks.template_compilation.benchmark.TemplateCompile.time_template_compile": {
        "code": "class TemplateCompile:\n    def time_template_compile(self):\n        template.Template(\n            \"\"\"\n            {% for v in vals %}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n            {% endfor %}\n        \"\"\"\n        )\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "template_benchmarks.template_compilation.benchmark.TemplateCompile.time_template_compile",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "38f1b2f3580ca1b6eb7a7132553adf5788365bb818d9a50789d30cf710f7193f",
        "warmup_time": -1
    },
    "template_benchmarks.template_render.benchmark.TemplateRender.time_render_simple": {
        "code": "class TemplateRender:\n    def time_render_simple(self):\n        context = template.Context({\"stuff\": \"something\"})\n        t = template.Template(\"{{ stuff }}\")\n        for i in range(10):\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n\n    def setup(self):\n        bench_setup()\n        self.context = {\n            \"objects1\": [object(), object(), object(), object(), object()],\n            \"objects2\": [object(), object(), object(), object(), object()],\n            \"object1\": object(),\n            \"object2\": object(),\n            \"object3\": None,\n            \"num1\": 1,\n            \"num2\": 2,\n            \"boolean1\": True,\n            \"SCRIPT_CONTENT_URL\": \"/some/prefix\",\n            \"WEBSITE_DOMAIN\": \"http://www.somedomain.com\",\n            \"SHOW_ALT_HEADER\": \"True\",\n            \"base_template\": \"base.html\",\n        }",
        "min_run_count": 2,
        "name": "template_benchmarks.template_render.benchmark.TemplateRender.time_render_simple",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "09db9f7279757a0aa4da65ffd085756fc1768e86c4b68e32948d5cb43f0e0e1e",
        "warmup_time": -1
    },
    "template_benchmarks.template_render.benchmark.TemplateRender.time_template_render": {
        "code": "class TemplateRender:\n    def time_template_render(self):\n        if VERSION >= (4, 0):\n            render(HttpRequest(), \"permalink.html\", self.context)\n        else:\n            render(HttpRequest(), \"permalink_django_lte_40.html\", self.context)\n\n    def setup(self):\n        bench_setup()\n        self.context = {\n            \"objects1\": [object(), object(), object(), object(), object()],\n            \"objects2\": [object(), object(), object(), object(), object()],\n            \"object1\": object(),\n            \"object2\": object(),\n            \"object3\": None,\n            \"num1\": 1,\n            \"num2\": 2,\n            \"boolean1\": True,\n            \"SCRIPT_CONTENT_URL\": \"/some/prefix\",\n            \"WEBSITE_DOMAIN\": \"http://www.somedomain.com\",\n            \"SHOW_ALT_HEADER\": \"True\",\n            \"base_template\": \"base.html\",\n        }",
        "min_run_count": 2,
        "name": "template_benchmarks.template_render.benchmark.TemplateRender.time_template_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "98f359d23b19d1c6aa3ad62313df65654abcb625939a6be24f51231dadae1225",
        "warmup_time": -1
    },
    "url_benchmarks.url_resolve.benchmark.UrlResolve.time_resolve": {
        "code": "class UrlResolve:\n    def time_resolve(self):\n        for i in range(100):\n            resolve(\"/url-resolve/basic/\")\n            resolve('/url-resolve/fallthroughview/')\n            resolve('/url-resolve/replace/1')\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "url_benchmarks.url_resolve.benchmark.UrlResolve.time_resolve",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5e37710342e4f2f3779b390ae26a8cbde3ba83e0fec85c9fe7540f3672314054",
        "warmup_time": -1
    },
    "url_benchmarks.url_resolve_flat.benchmark.UrlResolveFlat.time_resolve_flat": {
        "code": "class UrlResolveFlat:\n    def time_resolve_flat(self):\n        paths = (\n            \"/url-resolve-flat/user/repo/feature19\",\n            \"/url-resolve-flat/section0/feature0\",\n            \"/url-resolve-flat/en/feature10\",\n            \"/url-resolve-flat/ru/feature10\",\n            \"/url-resolve-flat/missing\",\n        )\n        for i in range(100):\n            for path in paths:\n                try:\n                    resolve(path)\n                except Resolver404:\n                    pass\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "url_benchmarks.url_resolve_flat.benchmark.UrlResolveFlat.time_resolve_flat",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c0168b57a7e3f0fa4a288b1fb1f6c16f1533874de8cfbefc40148706bbe81c89",
        "warmup_time": -1
    },
    "url_benchmarks.url_resolve_nested.benchmark.UrlResolveNested.time_resolve_nested": {
        "code": "class UrlResolveNested:\n    def time_resolve_nested(self):\n        resolve(\"/url-resolve-nested/0/00/000/0000/00000/000000/0000000/00000000/leaf\")\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "url_benchmarks.url_resolve_nested.benchmark.UrlResolveNested.time_resolve_nested",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e60bd3364bf7ff09976cd5f918ea39c249e38709687c7d71761fc96a597e42d2",
        "warmup_time": -1
    },
    "url_benchmarks.url_reverse.benchmark.UrlReverse.time_reverse": {
        "code": "class UrlReverse:\n    def time_reverse(self):\n        reverse(\"url_reverse:basic\")\n        reverse(\"url_reverse:catchall\")\n        reverse(\"url_reverse:vars\", args=[1])\n        reverse(\"url_reverse:vars\", kwargs={\"var\": 1})\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "url_benchmarks.url_reverse.benchmark.UrlReverse.time_reverse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "36ffdb77bed577a567ba029e73d9fddbfc9c9477ae6c3af7364df1da0dfd3a2e",
        "warmup_time": -1
    },
    "version": 2
}