{
    "bench_models.ModelBenchmarks.time_model_creation": {
        "code": "class ModelBenchmarks:\n    def time_model_creation(self):\n        Book.objects.create(title=\"hi!\")\n        Book.objects.create(title=\"Bye!\")\n        Book.objects.create(title=\"hi\")\n        Book.objects.create(title=\"Bye\")\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n    try:\n        call_command(\"loaddata\", \"initial_data\", verbosity=0)\n    except CommandError as exc:\n        # Django 1.10+ raises if the file doesn't exist and not\n        # all benchmarks have files.\n        if \"No fixture named\" not in str(exc):\n            raise\n\nclass ModelBenchmarks:\n    def setup(self):\n        self.save_existing = Book.objects.get(id=1)\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "bench_models.ModelBenchmarks.time_model_creation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3e8ee369804bd02b5222ed758fab5465cee94ecfc4fa55780be79a4f31cf7710",
        "warmup_time": -1
    },
    "bench_models.ModelBenchmarks.time_model_save_existing": {
        "code": "class ModelBenchmarks:\n    def time_model_save_existing(self):\n        for i in range(0, 30):\n            self.save_existing.save()\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n    try:\n        call_command(\"loaddata\", \"initial_data\", verbosity=0)\n    except CommandError as exc:\n        # Django 1.10+ raises if the file doesn't exist and not\n        # all benchmarks have files.\n        if \"No fixture named\" not in str(exc):\n            raise\n\nclass ModelBenchmarks:\n    def setup(self):\n        self.save_existing = Book.objects.get(id=1)\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "bench_models.ModelBenchmarks.time_model_save_existing",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "dd541f44cfd03a0538168bd3c20ca4c4b66ae3245ce84cb30737f714e858264a",
        "warmup_time": -1
    },
    "bench_models.ModelBenchmarks.time_save_new": {
        "code": "class ModelBenchmarks:\n    def time_save_new(self):\n        for i in range(self.book_count, self.book_count + 30):\n            b = Book(id=i, title=\"Foo\")\n            b.save()\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n    try:\n        call_command(\"loaddata\", \"initial_data\", verbosity=0)\n    except CommandError as exc:\n        # Django 1.10+ raises if the file doesn't exist and not\n        # all benchmarks have files.\n        if \"No fixture named\" not in str(exc):\n            raise\n\nclass ModelBenchmarks:\n    def setup(self):\n        self.save_existing = Book.objects.get(id=1)\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "bench_models.ModelBenchmarks.time_save_new",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6f0d687b26ffec22f5bc1f876751cc9041a29a16d54326426899be29cb3dbfdb",
        "warmup_time": -1
    },
    "bench_templates.TemplateBenchmarks.time_template_compilation": {
        "code": "class TemplateBenchmarks:\n    def time_template_compilation(self):\n        # Just compile the template, no rendering\n        template.Template(\n            \"\"\"\n            {% for v in vals %}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n            {% endfor %}\n        \"\"\"\n        )\n\n    def setup(self):\n        self.context = {\n            \"objects1\": objects1,\n            \"objects2\": objects2,\n            \"object1\": object1,\n            \"object2\": object2,\n            \"object3\": object3,\n            \"num1\": num1,\n            \"num2\": num2,\n            \"boolean1\": boolean1,\n            \"SCRIPT_CONTENT_URL\": SCRIPT_CONTENT_URL,\n            \"WEBSITE_DOMAIN\": WEBSITE_DOMAIN,\n            \"SHOW_ALT_HEADER\": SHOW_ALT_HEADER,\n            \"base_template\": \"base.html\",\n        }",
        "min_run_count": 2,
        "name": "bench_templates.TemplateBenchmarks.time_template_compilation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fcf2f6192034afe5d9dabe8829d1b2e548a6980e68178ebda16a289a4186c504",
        "warmup_time": -1
    },
    "bench_templates.TemplateBenchmarks.time_template_render": {
        "code": "class TemplateBenchmarks:\n    def time_template_render(self):\n        render(HttpRequest(), \"permalink.html\", self.context)\n\n    def setup(self):\n        self.context = {\n            \"objects1\": objects1,\n            \"objects2\": objects2,\n            \"object1\": object1,\n            \"object2\": object2,\n            \"object3\": object3,\n            \"num1\": num1,\n            \"num2\": num2,\n            \"boolean1\": boolean1,\n            \"SCRIPT_CONTENT_URL\": SCRIPT_CONTENT_URL,\n            \"WEBSITE_DOMAIN\": WEBSITE_DOMAIN,\n            \"SHOW_ALT_HEADER\": SHOW_ALT_HEADER,\n            \"base_template\": \"base.html\",\n        }",
        "min_run_count": 2,
        "name": "bench_templates.TemplateBenchmarks.time_template_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "52cc9dd95212270340fea86f42d7a73211c1d2bd5bbaa4caa694cf484cbfa28c",
        "warmup_time": -1
    },
    "bench_templates.TemplateBenchmarks.time_template_render_simple": {
        "code": "class TemplateBenchmarks:\n    def time_template_render_simple(self):\n        context = template.Context({\"stuff\": \"something\"})\n        t = template.Template(\"{{ stuff }}\")\n        for i in range(10):\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n\n    def setup(self):\n        self.context = {\n            \"objects1\": objects1,\n            \"objects2\": objects2,\n            \"object1\": object1,\n            \"object2\": object2,\n            \"object3\": object3,\n            \"num1\": num1,\n            \"num2\": num2,\n            \"boolean1\": boolean1,\n            \"SCRIPT_CONTENT_URL\": SCRIPT_CONTENT_URL,\n            \"WEBSITE_DOMAIN\": WEBSITE_DOMAIN,\n            \"SHOW_ALT_HEADER\": SHOW_ALT_HEADER,\n            \"base_template\": \"base.html\",\n        }",
        "min_run_count": 2,
        "name": "bench_templates.TemplateBenchmarks.time_template_render_simple",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "00ee86b1da251ce16979d0b43076997a1eccb0994106a54f702a36224274541c",
        "warmup_time": -1
    },
    "bench_urls.URLBenchmarks.time_url_resolve": {
        "code": "class URLBenchmarks:\n    def time_url_resolve(self):\n        for i in range(0, 100):\n            resolve(\"/basic/\")\n            resolve(\"/fallthroughview/\")\n            resolve(\"/replace/1\")\n\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "bench_urls.URLBenchmarks.time_url_resolve",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e5673087d22de48bcfd125f83fa5af49e20fe2b373bd4028c87e1420e462d7d9",
        "warmup_time": -1
    },
    "bench_urls.URLBenchmarks.time_url_resolve_flat": {
        "code": "class URLBenchmarks:\n    def time_url_resolve_flat(self):\n        paths = (\n            \"/user/repo/feature19\",\n            \"/section0/feature0\",\n            \"/en/feature10\",\n            \"/ru/feature10\",\n            \"/missing\",\n        )\n        for i in range(0, 100):\n            for path in paths:\n                try:\n                    resolve(path)\n                except Resolver404:\n                    pass\n\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "bench_urls.URLBenchmarks.time_url_resolve_flat",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "af06d216e1302abbc4288bfc573981a735e521fd982cd759a827efdde35545f2",
        "warmup_time": -1
    },
    "bench_urls.URLBenchmarks.time_url_resolve_nested": {
        "code": "class URLBenchmarks:\n    def time_url_resolve_nested(self):\n        resolve(\"/0/00/000/0000/00000/000000/0000000/00000000/leaf\")\n\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "bench_urls.URLBenchmarks.time_url_resolve_nested",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5f00e8daab079fdfe222aa8d4f78cc2c5a7dfc592c6a7d947afcb511ac4f8462",
        "warmup_time": -1
    },
    "bench_urls.URLBenchmarks.time_url_reverse": {
        "code": "class URLBenchmarks:\n    def time_url_reverse(self):\n        reverse(\"basic\")\n        reverse(\"catchall\")\n        reverse(\"vars\", args=[1])\n        reverse(\"vars\", kwargs={\"var\": 1})\n        # repeat for more stable benchmark\n        reverse(\"basic\")\n        reverse(\"catchall\")\n        reverse(\"vars\", args=[1])\n        reverse(\"vars\", kwargs={\"var\": 1})\n\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "bench_urls.URLBenchmarks.time_url_reverse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1f8b9aca0d4fbd3abc664c48ce7f88065528ead948f1b9be7dded1d58b70866f",
        "warmup_time": -1
    },
    "forms.FormBenchmarks.time_create_form": {
        "code": "class FormBenchmarks:\n    def time_create_form(self):\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n\n    def setup(self):\n    \n        self.form_clean = BookForm({\"title\": \"hi\"})\n        self.widget = SelectDateWidget(years=(2020,))\n        self.form_render_small = BookForm()\n        self.form_render_large = BookFormLarge()",
        "min_run_count": 2,
        "name": "forms.FormBenchmarks.time_create_form",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e7e6c207cab4376384c0e36eb343fc98744a7d319f57da1997922e4015966d53",
        "warmup_time": -1
    },
    "forms.FormBenchmarks.time_form_clean": {
        "code": "class FormBenchmarks:\n    def time_form_clean(self):\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n\n    def setup(self):\n    \n        self.form_clean = BookForm({\"title\": \"hi\"})\n        self.widget = SelectDateWidget(years=(2020,))\n        self.form_render_small = BookForm()\n        self.form_render_large = BookFormLarge()",
        "min_run_count": 2,
        "name": "forms.FormBenchmarks.time_form_clean",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "27da6fc3997fa1313bd40a7103984cfc49b21c0657453e431cd4ccf058814b22",
        "warmup_time": -1
    },
    "forms.FormBenchmarks.time_large_form_render": {
        "code": "class FormBenchmarks:\n    def time_large_form_render(self):\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n\n    def setup(self):\n    \n        self.form_clean = BookForm({\"title\": \"hi\"})\n        self.widget = SelectDateWidget(years=(2020,))\n        self.form_render_small = BookForm()\n        self.form_render_large = BookFormLarge()",
        "min_run_count": 2,
        "name": "forms.FormBenchmarks.time_large_form_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "dfae3079ae9e9816e30ffb27da3e17e4a0498aa3d4dc3b0bfdb6447959681278",
        "warmup_time": -1
    },
    "forms.FormBenchmarks.time_selectdatewidget": {
        "code": "class FormBenchmarks:\n    def time_selectdatewidget(self):\n        self.widget.get_context('widget', \"2020-10-10\", {})\n        self.widget.get_context('widget', \"2020-10-10\", {})\n        self.widget.get_context('widget', \"2020-10-10\", {})\n        self.widget.get_context('widget', \"2020-10-10\", {})\n        self.widget.get_context('widget', \"2020-10-10\", {})\n        self.widget.get_context('widget', \"2020-10-10\", {})\n        self.widget.get_context('widget', \"2020-10-10\", {})\n\n    def setup(self):\n    \n        self.form_clean = BookForm({\"title\": \"hi\"})\n        self.widget = SelectDateWidget(years=(2020,))\n        self.form_render_small = BookForm()\n        self.form_render_large = BookFormLarge()",
        "min_run_count": 2,
        "name": "forms.FormBenchmarks.time_selectdatewidget",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "55bd00c0094cf293969c5096895bbff4596633b39a7e4afec9aeefb3d40fe2d3",
        "warmup_time": -1
    },
    "forms.FormBenchmarks.time_small_form_render": {
        "code": "class FormBenchmarks:\n    def time_small_form_render(self):\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n\n    def setup(self):\n    \n        self.form_clean = BookForm({\"title\": \"hi\"})\n        self.widget = SelectDateWidget(years=(2020,))\n        self.form_render_small = BookForm()\n        self.form_render_large = BookFormLarge()",
        "min_run_count": 2,
        "name": "forms.FormBenchmarks.time_small_form_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "aa4e6dc5f655c9467cda9d325cd3293f97530513851624168e703a2997dc6671",
        "warmup_time": -1
    },
    "other.OtherBenchmarks.time_raw_sql": {
        "code": "class OtherBenchmarks:\n    def time_raw_sql(self):\n        for i in range(10):\n            cursor = connection.cursor()\n            cursor.execute(\"select field1 from benchmarks_onefield\")\n            list(cursor.fetchall())\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass OtherBenchmarks:\n    def setup(self):\n        for i in range(0, 10):\n            OneField(field1=i).save()",
        "min_run_count": 2,
        "name": "other.OtherBenchmarks.time_raw_sql",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "97af288e95cbfd48f2550decf53f504d1e5ad5947186ef67235ff7a6d6217f2a",
        "warmup_time": -1
    },
    "query.QueryAll.time_query_all": {
        "code": "class QueryAll:\n    def time_query_all(self):\n        list(Book.objects.iterator())\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryAll:\n    def setup(self):\n        for i in range(0, 3000):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "query.QueryAll.time_query_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "22138177825f378cd95491dcfffd4a75e0fc2074414b6c643324a2a9d036502f",
        "warmup_time": -1
    },
    "query.QueryCount.time_query_count": {
        "code": "class QueryCount:\n    def time_query_count(self):\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryCount:\n    def setup(self):\n        for i in range(0, 10):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "query.QueryCount.time_query_count",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2f795f2d7b5324c779ba76ca11d287a6ba6e0f92b12aa7cb2b05e0311d739254",
        "warmup_time": -1
    },
    "query.QueryDelete.time_query_delete": {
        "code": "class QueryDelete:\n    def time_query_delete(self):\n        Book.objects.all().delete()\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryDelete:\n    def setup(self):\n        for i in range(0, 10):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "query.QueryDelete.time_query_delete",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0d5bf7e8e35d89dc8d017e0324d5bbd2136a88232239600637419c3b7bce7bc6",
        "warmup_time": -1
    },
    "query.QueryGet.time_query_get": {
        "code": "class QueryGet:\n    def time_query_get(self):\n        # This will succeed\n        Book.objects.get(id=1)\n        try:\n            # This will fail, due to too many objects\n            Book.objects.get()\n        except Book.MultipleObjectsReturned:\n            pass\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryGet:\n    def setup(self):\n        for i in range(0, 10):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "query.QueryGet.time_query_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2a3454c42051bf38a9f1643d93abc4625eed39a4f8ce840f5a07c3556c383c11",
        "warmup_time": -1
    },
    "query.QueryGetOrCreate.time_query_get_or_create": {
        "code": "class QueryGetOrCreate:\n    def time_query_get_or_create(self):\n        # This will do a create ...\n        Book.objects.get_or_create(id=self.next_id, defaults={\"title\": \"hi\"})\n    \n        # ... and this a get.\n        Book.objects.get_or_create(id=self.next_id, defaults={\"title\": \"hi\"})\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryGetOrCreate:\n    def setup(self):\n        for i in range(0, 10):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.next_id = Book.objects.count() + 1",
        "min_run_count": 2,
        "name": "query.QueryGetOrCreate.time_query_get_or_create",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7335d8d8c9e42c984f417af1b1d6685b1136ecad6efe47b00ad955e8faa6a99c",
        "warmup_time": -1
    },
    "query.QueryRaw.time_query_raw_deferred": {
        "code": "class QueryRaw:\n    def time_query_raw_deferred(self):\n        list(MultiField.objects.raw(\"select * from benchmarks_multifield\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryRaw:\n    def setup(self):\n        for i in range(0, 1000):\n            kwargs = {}\n            for j in range(1, 11):\n                kwargs[\"field%s\" % j] = \"foobar_%s_%s\" % (i, j)\n            MultiField(**kwargs).save()",
        "min_run_count": 2,
        "name": "query.QueryRaw.time_query_raw_deferred",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5a564f9b42ea9f1d3acda29eab31a8890d1de5afa9716afa6efd7e16d780a6ed",
        "warmup_time": -1
    },
    "query.QueryRawDeferred.time_query_raw_deferred": {
        "code": "class QueryRawDeferred:\n    def time_query_raw_deferred(self):\n        list(MultiField.objects.raw(\"select id from benchmarks_multifield\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryRawDeferred:\n    def setup(self):\n        for i in range(0, 1000):\n            kwargs = {}\n            for j in range(1, 11):\n                kwargs[\"field%s\" % j] = \"foobar_%s_%s\" % (i, j)\n            MultiField(**kwargs).save()",
        "min_run_count": 2,
        "name": "query.QueryRawDeferred.time_query_raw_deferred",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "61db8d42cdea27aab916ffb699837dff48a71265b07f0b4ff3f43952a54e5857",
        "warmup_time": -1
    },
    "query.QuerySelectRelated.time_query_select_related": {
        "code": "class QuerySelectRelated:\n    def time_query_select_related(self):\n        for i in range(20):\n            list(Book.objects.select_related(\"author\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QuerySelectRelated:\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "query.QuerySelectRelated.time_query_select_related",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "daa5dd150149b1309fecb5ae02207b78b7ea8f38a33255f88dea8a0990379fe1",
        "warmup_time": -1
    },
    "query.QueryUpdate.time_query_update": {
        "code": "class QueryUpdate:\n    def time_query_update(self):\n        Book.objects.all().update(title=\"z\")\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryUpdate:\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "query.QueryUpdate.time_query_update",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "278fc08aed28d7658981624dbc07d640ba1b2070b5127ee592d7f34647cb9bfb",
        "warmup_time": -1
    },
    "query.QueryValues.time_query_values": {
        "code": "class QueryValues:\n    def time_query_values(self):\n        list(Book.objects.values(\"title\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryValues:\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "query.QueryValues.time_query_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d47e8b232a53f3ca16530fc86c51f98ebb5f76412ed3087e79c8f4b2cb347cc0",
        "warmup_time": -1
    },
    "query.QueryValues10000.time_query_values_10000": {
        "code": "class QueryValues10000:\n    def time_query_values_10000(self):\n        list(Book.objects.values(\"title\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryValues10000:\n    def setup(self):\n        Book.objects.bulk_create((Book(title=\"title\") for x in range(10000)))",
        "min_run_count": 2,
        "name": "query.QueryValues10000.time_query_values_10000",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "04355dd380714619483ebcdbbf33aaf9744f07bba6c6525eca4ece7b58df61e5",
        "warmup_time": -1
    },
    "query.QueryValuesList.time_query_values_list": {
        "code": "class QueryValuesList:\n    def time_query_values_list(self):\n        list(Book.objects.values_list(\"title\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryValuesList:\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "query.QueryValuesList.time_query_values_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0c8f296a5321b15a012022e14e4767e90f0037ac037c6529be5521dd2306fc99",
        "warmup_time": -1
    },
    "query_benchmarks.query_in_bulk.benchmark.QueryInBulk.time_query_in_bulk": {
        "code": "class QueryInBulk:\n    def time_query_in_bulk(self):\n        Book.objects.in_bulk([1])\n        Book.objects.in_bulk([1,2])\n        Book.objects.in_bulk([1,2,3])\n        Book.objects.in_bulk([1,2,3,4])\n        Book.objects.in_bulk([1,2,3,4,5])\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_in_bulk.benchmark.QueryInBulk.time_query_in_bulk",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "43e423899c90d691e2b0a09df64e55a4207a13810efad3283eb75cd5f2c0b5b8",
        "warmup_time": -1
    },
    "version": 2
}
