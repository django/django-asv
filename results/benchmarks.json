{
    "form_benchmarks.form_clean.benchmark.FormClean.time_form_clean": {
        "code": "class FormClean:\n    def time_form_clean(self):\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n        self.form_clean.full_clean()\n\n    def setup(self):\n        bench_setup()\n        self.form_clean = BookForm({\"title\": \"hi\"})",
        "min_run_count": 2,
        "name": "form_benchmarks.form_clean.benchmark.FormClean.time_form_clean",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ee29794571c41279669d20f20281cc13f17d30b60bcf0a82427562e1966ddbcc",
        "warmup_time": -1
    },
    "form_benchmarks.form_create.benchmark.FormCreate.time_form_create": {
        "code": "class FormCreate:\n    def time_form_create(self):\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n        BookForm({\"title\": \"a\"})\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "form_benchmarks.form_create.benchmark.FormCreate.time_form_create",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f295800916ba0353a8a99603d8dc2b2b9250a086b427f34f687fa6ca8c74a437",
        "warmup_time": -1
    },
    "form_benchmarks.form_render.benchmark.FormRender.time_large_form_render": {
        "code": "class FormRender:\n    def time_large_form_render(self):\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n        str(self.form_render_large)\n\n    def setup(self):\n        bench_setup()\n        self.form_render_small = BookForm()\n        self.form_render_large = BookFormLarge()",
        "min_run_count": 2,
        "name": "form_benchmarks.form_render.benchmark.FormRender.time_large_form_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "66f0369fe80d6fd2f3faf90e024b84f3e3f428f86a55391f33c8fda952f4069b",
        "warmup_time": -1
    },
    "form_benchmarks.form_render.benchmark.FormRender.time_small_form_render": {
        "code": "class FormRender:\n    def time_small_form_render(self):\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n        str(self.form_render_small)\n\n    def setup(self):\n        bench_setup()\n        self.form_render_small = BookForm()\n        self.form_render_large = BookFormLarge()",
        "min_run_count": 2,
        "name": "form_benchmarks.form_render.benchmark.FormRender.time_small_form_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cdb90a82bf65beabdc6b9d90b77b4078dc0421573ddcd3667c163dafc183115c",
        "warmup_time": -1
    },
    "form_benchmarks.form_validate.benchmark.FormValidate.time_form_invalid": {
        "code": "class FormValidate:\n    def time_form_invalid(self):\n        self.invalid_form.is_valid()\n\n    def setup(self):\n        bench_setup()\n        self.form = BookForm({\"title\": \"hi\"})\n        self.invalid_form = BookForm({\"title\": \"abc\"})",
        "min_run_count": 2,
        "name": "form_benchmarks.form_validate.benchmark.FormValidate.time_form_invalid",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ad7620bc75a45df372d038555834e7ed535578e19fd62452d062cefabdf368f7",
        "warmup_time": -1
    },
    "form_benchmarks.form_validate.benchmark.FormValidate.time_form_validate": {
        "code": "class FormValidate:\n    def time_form_validate(self):\n        self.form.is_valid()\n\n    def setup(self):\n        bench_setup()\n        self.form = BookForm({\"title\": \"hi\"})\n        self.invalid_form = BookForm({\"title\": \"abc\"})",
        "min_run_count": 2,
        "name": "form_benchmarks.form_validate.benchmark.FormValidate.time_form_validate",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "437e1a9cc92f7a7e2962cbcef25685fdc9abb08ea893ef13117809c871ab2485",
        "warmup_time": -1
    },
    "form_benchmarks.select_date_widget.benchmark.DateWidget.time_selectdatewidget": {
        "code": "class DateWidget:\n    def time_selectdatewidget(self):\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n        self.widget.get_context(\"widget\", \"2020-10-10\", {})\n\n    def setup(self):\n        bench_setup()\n        self.widget = SelectDateWidget(years=(2020,))",
        "min_run_count": 2,
        "name": "form_benchmarks.select_date_widget.benchmark.DateWidget.time_selectdatewidget",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e142c151a06875776e38885d1898841e9c4cb94eacf6be20e18abe1defa4030b",
        "warmup_time": -1
    },
    "model_benchmarks.model_create.benchmark.ModelCreate.time_model_creation": {
        "code": "class ModelCreate:\n    def time_model_creation(self):\n        Book.objects.create(title=\"hi\")\n        Book.objects.create(title=\"Bye!\")\n        Book.objects.create(title=\"hi\")\n        Book.objects.create(title=\"Bye\")\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "model_benchmarks.model_create.benchmark.ModelCreate.time_model_creation",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "91180db199cb53578ddba7cc684885e2afde1d4c44861f83fd2a06b18f33b747",
        "warmup_time": -1
    },
    "model_benchmarks.model_save_existing.benchmark.SaveExisting.time_save_existing": {
        "code": "class SaveExisting:\n    def time_save_existing(self):\n        b = Book.objects.get(id=1)\n        for i in range(0, 30):\n            b.save()\n\n    def setup(self):\n        bench_setup(migrate=True)\n        Book.objects.create(id=1, title=\"Foo\")",
        "min_run_count": 2,
        "name": "model_benchmarks.model_save_existing.benchmark.SaveExisting.time_save_existing",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "525f25f65810aa120b97e393077f231c99bb5f88e9f53656cbe71d62a669e246",
        "warmup_time": -1
    },
    "model_benchmarks.model_save_new.benchmark.SaveNew.time_save_new": {
        "code": "class SaveNew:\n    def time_save_new(self):\n        for i in range(0, 30):\n            b = Book(id=i, title=\"Foo\")\n            b.save()\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "model_benchmarks.model_save_new.benchmark.SaveNew.time_save_new",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4f0e2dafce2ac247d865fcb80db98261fa0904821d191fa014bf4e8826bdbbe6",
        "warmup_time": -1
    },
    "other_benchmarks.raw_sql.benchmark.RawSql.time_raw_sql": {
        "code": "class RawSql:\n    def time_raw_sql(self):\n        for i in range(10):\n            cursor = connection.cursor()\n            cursor.execute(\"select field1 from raw_sql_onefield\")\n            list(cursor.fetchall())\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(0, 10):\n            OneField(field1=i).save()",
        "min_run_count": 2,
        "name": "other_benchmarks.raw_sql.benchmark.RawSql.time_raw_sql",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d0365d9e4c87fd5f9d57ddbee3adb462787c2ced150ff9aff871ee5112a67ca4",
        "warmup_time": -1
    },
    "query.QueryAll.time_query_all": {
        "code": "class QueryAll:\n    def time_query_all(self):\n        list(Book.objects.iterator())\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryAll:\n    def setup(self):\n        for i in range(0, 3000):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "query.QueryAll.time_query_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "22138177825f378cd95491dcfffd4a75e0fc2074414b6c643324a2a9d036502f",
        "warmup_time": -1
    },
    "query.QueryCount.time_query_count": {
        "code": "class QueryCount:\n    def time_query_count(self):\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n        Book.objects.count()\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryCount:\n    def setup(self):\n        for i in range(0, 10):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "query.QueryCount.time_query_count",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2f795f2d7b5324c779ba76ca11d287a6ba6e0f92b12aa7cb2b05e0311d739254",
        "warmup_time": -1
    },
    "query.QueryDelete.time_query_delete": {
        "code": "class QueryDelete:\n    def time_query_delete(self):\n        Book.objects.all().delete()\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryDelete:\n    def setup(self):\n        for i in range(0, 10):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "query.QueryDelete.time_query_delete",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0d5bf7e8e35d89dc8d017e0324d5bbd2136a88232239600637419c3b7bce7bc6",
        "warmup_time": -1
    },
    "query.QueryGet.time_query_get": {
        "code": "class QueryGet:\n    def time_query_get(self):\n        # This will succeed\n        Book.objects.get(id=1)\n        try:\n            # This will fail, due to too many objects\n            Book.objects.get()\n        except Book.MultipleObjectsReturned:\n            pass\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryGet:\n    def setup(self):\n        for i in range(0, 10):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.book_count = Book.objects.count()",
        "min_run_count": 2,
        "name": "query.QueryGet.time_query_get",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2a3454c42051bf38a9f1643d93abc4625eed39a4f8ce840f5a07c3556c383c11",
        "warmup_time": -1
    },
    "query.QueryGetOrCreate.time_query_get_or_create": {
        "code": "class QueryGetOrCreate:\n    def time_query_get_or_create(self):\n        # This will do a create ...\n        Book.objects.get_or_create(id=self.next_id, defaults={\"title\": \"hi\"})\n    \n        # ... and this a get.\n        Book.objects.get_or_create(id=self.next_id, defaults={\"title\": \"hi\"})\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryGetOrCreate:\n    def setup(self):\n        for i in range(0, 10):\n            Book(pk=i, title=\"foobar_%s\" % i).save()\n        self.next_id = Book.objects.count() + 1",
        "min_run_count": 2,
        "name": "query.QueryGetOrCreate.time_query_get_or_create",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7335d8d8c9e42c984f417af1b1d6685b1136ecad6efe47b00ad955e8faa6a99c",
        "warmup_time": -1
    },
    "query.QueryRaw.time_query_raw_deferred": {
        "code": "class QueryRaw:\n    def time_query_raw_deferred(self):\n        list(MultiField.objects.raw(\"select * from benchmarks_multifield\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryRaw:\n    def setup(self):\n        for i in range(0, 1000):\n            kwargs = {}\n            for j in range(1, 11):\n                kwargs[\"field%s\" % j] = \"foobar_%s_%s\" % (i, j)\n            MultiField(**kwargs).save()",
        "min_run_count": 2,
        "name": "query.QueryRaw.time_query_raw_deferred",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5a564f9b42ea9f1d3acda29eab31a8890d1de5afa9716afa6efd7e16d780a6ed",
        "warmup_time": -1
    },
    "query.QueryRawDeferred.time_query_raw_deferred": {
        "code": "class QueryRawDeferred:\n    def time_query_raw_deferred(self):\n        list(MultiField.objects.raw(\"select id from benchmarks_multifield\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryRawDeferred:\n    def setup(self):\n        for i in range(0, 1000):\n            kwargs = {}\n            for j in range(1, 11):\n                kwargs[\"field%s\" % j] = \"foobar_%s_%s\" % (i, j)\n            MultiField(**kwargs).save()",
        "min_run_count": 2,
        "name": "query.QueryRawDeferred.time_query_raw_deferred",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "61db8d42cdea27aab916ffb699837dff48a71265b07f0b4ff3f43952a54e5857",
        "warmup_time": -1
    },
    "query.QuerySelectRelated.time_query_select_related": {
        "code": "class QuerySelectRelated:\n    def time_query_select_related(self):\n        for i in range(20):\n            list(Book.objects.select_related(\"author\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QuerySelectRelated:\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "query.QuerySelectRelated.time_query_select_related",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "daa5dd150149b1309fecb5ae02207b78b7ea8f38a33255f88dea8a0990379fe1",
        "warmup_time": -1
    },
    "query.QueryUpdate.time_query_update": {
        "code": "class QueryUpdate:\n    def time_query_update(self):\n        Book.objects.all().update(title=\"z\")\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryUpdate:\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "query.QueryUpdate.time_query_update",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "278fc08aed28d7658981624dbc07d640ba1b2070b5127ee592d7f34647cb9bfb",
        "warmup_time": -1
    },
    "query.QueryValues.time_query_values": {
        "code": "class QueryValues:\n    def time_query_values(self):\n        list(Book.objects.values(\"title\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryValues:\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "query.QueryValues.time_query_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d47e8b232a53f3ca16530fc86c51f98ebb5f76412ed3087e79c8f4b2cb347cc0",
        "warmup_time": -1
    },
    "query.QueryValues10000.time_query_values_10000": {
        "code": "class QueryValues10000:\n    def time_query_values_10000(self):\n        list(Book.objects.values(\"title\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryValues10000:\n    def setup(self):\n        Book.objects.bulk_create((Book(title=\"title\") for x in range(10000)))",
        "min_run_count": 2,
        "name": "query.QueryValues10000.time_query_values_10000",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "04355dd380714619483ebcdbbf33aaf9744f07bba6c6525eca4ece7b58df61e5",
        "warmup_time": -1
    },
    "query.QueryValuesList.time_query_values_list": {
        "code": "class QueryValuesList:\n    def time_query_values_list(self):\n        list(Book.objects.values_list(\"title\"))\n\ndef setup():\n    call_command(\"migrate\", run_syncdb=True, verbosity=0)\n\nclass QueryValuesList:\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "query.QueryValuesList.time_query_values_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0c8f296a5321b15a012022e14e4767e90f0037ac037c6529be5521dd2306fc99",
        "warmup_time": -1
    },
    "query_benchmarks.query_all_conv.benchmark.QueryAllConv.time_query_all_conv": {
        "code": "class QueryAllConv:\n    def time_query_all_conv(self):\n        list(Converters.objects.iterator())\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(0, 100):\n            Converters().save()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_all_conv.benchmark.QueryAllConv.time_query_all_conv",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "703c97a4784e3948b78e4019e0a1815d8860766dda028d133cc74da22931fe72",
        "warmup_time": -1
    },
    "query_benchmarks.query_annotate.benchmark.QueryAnnotate.time_annotate": {
        "code": "class QueryAnnotate:\n    def time_annotate(self):\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n        list(Book.objects.values(\"title\").annotate(books_total=Count(\"id\")))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_annotate.benchmark.QueryAnnotate.time_annotate",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "788b35efac890a1a2c2606a5d7eee47d7c0ecb36f5e1d903b750d462fbb2bf6f",
        "warmup_time": -1
    },
    "query_benchmarks.query_complex_filter.benchmark.QueryCmplxFilter.time_query_complex_filter": {
        "code": "class QueryCmplxFilter:\n    def time_query_complex_filter(self):\n        Book.objects.complex_filter({\"pk\": 1})\n        Book.objects.complex_filter({\"pk\": 2})\n        Book.objects.complex_filter({\"pk\": 3})\n        Book.objects.complex_filter({\"pk\": 4})\n        Book.objects.complex_filter({\"pk\": 5})\n        Book.objects.complex_filter({\"pk\": 6})\n        Book.objects.complex_filter({\"pk\": 7})\n        Book.objects.complex_filter({\"pk\": 8})\n        Book.objects.complex_filter({\"pk\": 9})\n        Book.objects.complex_filter({\"pk\": 10})\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_complex_filter.benchmark.QueryCmplxFilter.time_query_complex_filter",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3ae4f08ae12592cc5bf85bb0ff31501cb9db067c8c3468b04777fb35a0fee1ba",
        "warmup_time": -1
    },
    "query_benchmarks.query_dates.benchmark.QueryDates.time_query_dates": {
        "code": "class QueryDates:\n    def time_query_dates(self):\n        list(Book.objects.dates(\"created_date\", \"year\", \"ASC\"))\n        list(Book.objects.dates(\"created_date\", \"year\", \"DESC\"))\n        list(Book.objects.dates(\"created_date\", \"month\", \"ASC\"))\n        list(Book.objects.dates(\"created_date\", \"month\", \"DESC\"))\n        list(Book.objects.dates(\"created_date\", \"day\", \"ASC\"))\n        list(Book.objects.dates(\"created_date\", \"day\", \"DESC\"))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_dates.benchmark.QueryDates.time_query_dates",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "62cc8cf7481d2b65d3c219174582d7cee1309073de75d2dfb248c83d1fdd8b35",
        "warmup_time": -1
    },
    "query_benchmarks.query_delete_related.benchmark.QueryDeleteRel.time_query_del_rel": {
        "code": "class QueryDeleteRel:\n    def time_query_del_rel(self):\n        Artist.objects.all().delete()\n\n    def setup(self):\n        bench_setup(migrate=True)\n        self.a1 = Artist.objects.create(name=\"abc\")\n        self.a2 = Artist.objects.create(name=\"abc\")\n        self.a3 = Artist.objects.create(name=\"abc\")\n        self.a4 = Artist.objects.create(name=\"abc\")\n        self.a5 = Artist.objects.create(name=\"abc\")\n        self.a6 = Artist.objects.create(name=\"abc\")\n        self.a7 = Artist.objects.create(name=\"abc\")\n        self.a8 = Artist.objects.create(name=\"abc\")\n        self.a9 = Artist.objects.create(name=\"abc\")\n        self.a10 = Artist.objects.create(name=\"abc\")\n        for i in range(10):\n            Song.objects.create(artist=self.a1, name=f\"song{i}\")\n            Song.objects.create(artist=self.a2, name=f\"song{i}\")\n            Song.objects.create(artist=self.a3, name=f\"song{i}\")\n            Song.objects.create(artist=self.a4, name=f\"song{i}\")\n            Song.objects.create(artist=self.a5, name=f\"song{i}\")\n            Song.objects.create(artist=self.a6, name=f\"song{i}\")\n            Song.objects.create(artist=self.a7, name=f\"song{i}\")\n            Song.objects.create(artist=self.a8, name=f\"song{i}\")\n            Song.objects.create(artist=self.a9, name=f\"song{i}\")\n            Song.objects.create(artist=self.a10, name=f\"song{i}\")",
        "min_run_count": 2,
        "name": "query_benchmarks.query_delete_related.benchmark.QueryDeleteRel.time_query_del_rel",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8e16574ce95e501c7c1d3131c11dcc4d33607a7d02d86a9bc423e148a13b7a78",
        "warmup_time": -1
    },
    "query_benchmarks.query_distinct.benchmark.QueryDistinct.time_query_distinct": {
        "code": "class QueryDistinct:\n    def time_query_distinct(self):\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n        list(Book.objects.distinct())\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_distinct.benchmark.QueryDistinct.time_query_distinct",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2381751aa6177ac678baf313bb6b26406eab664fdc0baa7da53323c3f9f0f1ce",
        "warmup_time": -1
    },
    "query_benchmarks.query_exclude.benchmark.QueryExclude.time_query_exclude": {
        "code": "class QueryExclude:\n    def time_query_exclude(self):\n        list(Book.objects.exclude(id=1))\n        list(Book.objects.exclude(id=2))\n        list(Book.objects.exclude(id=3))\n        list(Book.objects.exclude(id=4))\n        list(Book.objects.exclude(id=5))\n        list(Book.objects.exclude(id=6))\n        list(Book.objects.exclude(id=7))\n        list(Book.objects.exclude(id=8))\n        list(Book.objects.exclude(id=9))\n        list(Book.objects.exclude(id=10))\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_exclude.benchmark.QueryExclude.time_query_exclude",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0ec6607e8596b0906e7f012170ef2fe3db17e5ccc9ddbef4767db6e4b4335046",
        "warmup_time": -1
    },
    "query_benchmarks.query_exists.benchmark.QueryExists.time_query_exists": {
        "code": "class QueryExists:\n    def time_query_exists(self):\n        # Checking for object that exists\n        Book.objects.filter(id=1).exists()\n        Book.objects.filter(id=2).exists()\n        Book.objects.filter(id=3).exists()\n        Book.objects.filter(id=4).exists()\n        Book.objects.filter(id=5).exists()\n    \n        # Checking for object that does not exist\n        Book.objects.filter(id=11).exists()\n        Book.objects.filter(id=12).exists()\n        Book.objects.filter(id=13).exists()\n        Book.objects.filter(id=14).exists()\n        Book.objects.filter(id=15).exists()\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_exists.benchmark.QueryExists.time_query_exists",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "95f702f8cefab6c10cf13623abd6b66fab22232e235f9466701ff131d30f9f2c",
        "warmup_time": -1
    },
    "query_benchmarks.query_in_bulk.benchmark.QueryInBulk.time_query_in_bulk": {
        "code": "class QueryInBulk:\n    def time_query_in_bulk(self):\n        Book.objects.in_bulk([1])\n        Book.objects.in_bulk([1, 2])\n        Book.objects.in_bulk([1, 2, 3])\n        Book.objects.in_bulk([1, 2, 3, 4])\n        Book.objects.in_bulk([1, 2, 3, 4, 5])\n\n    def setup(self):\n        bench_setup(migrate=True)",
        "min_run_count": 2,
        "name": "query_benchmarks.query_in_bulk.benchmark.QueryInBulk.time_query_in_bulk",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b18427aab8a0e5e2060eca1624c3481c013959597961cb0bb56e1c7d0c9f9c30",
        "warmup_time": -1
    },
    "query_benchmarks.query_multifield.benchmark.QueryMultiField.time_iter": {
        "code": "class QueryMultiField:\n    def time_iter(self):\n        list(MultiField.objects.iterator())\n\n    def setup(self):\n        bench_setup(migrate=True)\n        for i in range(0, 3000):\n            kwargs = {f\"field{j}\": f\"foobar_{i}_{j}\" for j in range(1, 11)}\n            MultiField(**kwargs).save()",
        "min_run_count": 2,
        "name": "query_benchmarks.query_multifield.benchmark.QueryMultiField.time_iter",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "81d47c90f0725e62f1d6236a21379dcaa2cda65193d9e2163556cbefd2acb914",
        "warmup_time": -1
    },
    "template_benchmarks.template_compilation.benchmark.TemplateCompile.time_template_compile": {
        "code": "class TemplateCompile:\n    def time_template_compile(self):\n        template.Template(\n            \"\"\"\n            {% for v in vals %}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n                {{ v }}\n            {% endfor %}\n        \"\"\"\n        )\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "template_benchmarks.template_compilation.benchmark.TemplateCompile.time_template_compile",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "38f1b2f3580ca1b6eb7a7132553adf5788365bb818d9a50789d30cf710f7193f",
        "warmup_time": -1
    },
    "template_benchmarks.template_render.benchmark.TemplateRender.time_render_simple": {
        "code": "class TemplateRender:\n    def time_render_simple(self):\n        context = template.Context({\"stuff\": \"something\"})\n        t = template.Template(\"{{ stuff }}\")\n        for i in range(10):\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n            t.render(context)\n\n    def setup(self):\n        bench_setup()\n        self.context = {\n            \"objects1\": [object(), object(), object(), object(), object()],\n            \"objects2\": [object(), object(), object(), object(), object()],\n            \"object1\": object(),\n            \"object2\": object(),\n            \"object3\": None,\n            \"num1\": 1,\n            \"num2\": 2,\n            \"boolean1\": True,\n            \"SCRIPT_CONTENT_URL\": \"/some/prefix\",\n            \"WEBSITE_DOMAIN\": \"http://www.somedomain.com\",\n            \"SHOW_ALT_HEADER\": \"True\",\n            \"base_template\": \"base.html\",\n        }",
        "min_run_count": 2,
        "name": "template_benchmarks.template_render.benchmark.TemplateRender.time_render_simple",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "09db9f7279757a0aa4da65ffd085756fc1768e86c4b68e32948d5cb43f0e0e1e",
        "warmup_time": -1
    },
    "template_benchmarks.template_render.benchmark.TemplateRender.time_template_render": {
        "code": "class TemplateRender:\n    def time_template_render(self):\n        if VERSION >= (4, 0):\n            render(HttpRequest(), \"permalink.html\", self.context)\n        else:\n            render(HttpRequest(), \"permalink_django_lte_40.html\", self.context)\n\n    def setup(self):\n        bench_setup()\n        self.context = {\n            \"objects1\": [object(), object(), object(), object(), object()],\n            \"objects2\": [object(), object(), object(), object(), object()],\n            \"object1\": object(),\n            \"object2\": object(),\n            \"object3\": None,\n            \"num1\": 1,\n            \"num2\": 2,\n            \"boolean1\": True,\n            \"SCRIPT_CONTENT_URL\": \"/some/prefix\",\n            \"WEBSITE_DOMAIN\": \"http://www.somedomain.com\",\n            \"SHOW_ALT_HEADER\": \"True\",\n            \"base_template\": \"base.html\",\n        }",
        "min_run_count": 2,
        "name": "template_benchmarks.template_render.benchmark.TemplateRender.time_template_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "98f359d23b19d1c6aa3ad62313df65654abcb625939a6be24f51231dadae1225",
        "warmup_time": -1
    },
    "url_benchmarks.url_resolve.benchmark.UrlResolve.time_resolve": {
        "code": "class UrlResolve:\n    def time_resolve(self):\n        for i in range(100):\n            resolve(\"/basic/\")\n            resolve(\"/fallthroughview/\")\n            resolve(\"/replace/1\")\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "url_benchmarks.url_resolve.benchmark.UrlResolve.time_resolve",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3c38439f75ae298159f3dfaaeadd49cad0e3432dfeac3c26430fc8b562538485",
        "warmup_time": -1
    },
    "url_benchmarks.url_resolve_flat.benchmark.UrlResolveFlat.time_resolve_flat": {
        "code": "class UrlResolveFlat:\n    def time_resolve_flat(self):\n        paths = (\n            \"/user/repo/feature19\",\n            \"/section0/feature0\",\n            \"/en/feature10\",\n            \"/ru/feature10\",\n            \"/missing\",\n        )\n        for i in range(100):\n            for path in paths:\n                try:\n                    resolve(path)\n                except Resolver404:\n                    pass\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "url_benchmarks.url_resolve_flat.benchmark.UrlResolveFlat.time_resolve_flat",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2bcd27020d316f1f52e978b5431877bb72361cc17c635897341765131c0f3de6",
        "warmup_time": -1
    },
    "url_benchmarks.url_resolve_nested.benchmark.UrlResolveNested.time_resolve_nested": {
        "code": "class UrlResolveNested:\n    def time_resolve_nested(self):\n        resolve(\"/0/00/000/0000/00000/000000/0000000/00000000/leaf\")\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "url_benchmarks.url_resolve_nested.benchmark.UrlResolveNested.time_resolve_nested",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9872f0a204c08cb8e70ebc08ef0bc38661b2b3bce3f34ebb56d51265ad7746f8",
        "warmup_time": -1
    },
    "url_benchmarks.url_reverse.benchmark.UrlReverse.time_reverse": {
        "code": "class UrlReverse:\n    def time_reverse(self):\n        reverse(\"basic\")\n        reverse(\"catchall\")\n        reverse(\"vars\", args=[1])\n        reverse(\"vars\", kwargs={\"var\": 1})\n\n    def setup(self):\n        bench_setup()",
        "min_run_count": 2,
        "name": "url_benchmarks.url_reverse.benchmark.UrlReverse.time_reverse",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "59d150881cb4c34568a326e6b8c5e53e507ae1726e18543bfd6c114239ea2dc6",
        "warmup_time": -1
    },
    "version": 2
}